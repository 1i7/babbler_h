#ifndef BABBLER_H
#define BABBLER_H

#include "stddef.h"

/**************************************/
// Стандартные ответы на команды (значения см в babbler.cpp)
/** Команда выполнена */
extern const char* REPLY_OK;
/** Команда не найдена */
extern const char* REPLY_DONTUNDERSTAND;
/** Команда найдена, но параметры некорректны */
extern const char* REPLY_BAD_PARAMS;
/** Ошибка выполнения команды */
extern const char* REPLY_ERROR;
/**
 * Ошибка формирования корректного ответа команды:
 * недостаточно места в буфере.
 * Сама команда может быть выполнена или не выполнена
 * (но скорее выполнена, чем не выполена, т.к. в случае 
 * неудачи ответ с сообщением об ошибке скорее будет коротким).
 */
extern const char* REPLY_REPLY_BUF_ERROR;
/** Устройство занято, команда отклонена */
extern const char* REPLY_BUSY;

/**
 * Информация, необходимая для запуска команды: 
 * имя и ссылка на функцию, выполняющую команду.
 */
typedef struct {
    /** Имя команды */
    const char* name;
    
    /** 
     * Указатель на функцию, выполняющую команду.
     * 
     * @param reply_buffer символьный буфер для записи ответа - 
     *     результата выполнения команды
     * @param reply_buf_size - размер буфера reply_buffer - максимальная длина ответа.
     *     Реализация функции должна следить за тем, чтобы длина ответа не превышала
     *     максимальный размер буфера
     * @param argc количество аргументов (по умолчанию может быть 0)
     * @param argv значения аргументов (по умолчанию может быть NULL),
     *     если задано, 1й аргумент - имя команды
     * @return длина ответа в байтах или код ошибки
     *     >0, <=reply_buf_size: количество байт, записанных в reply_buffer
     *     0: не отправлять ответ
     *    -1: ошибка при формировании ответа (не хватило места в буфере, ошибка выделения памяти и т.п.)
     */
    int (*exec_cmd)(char* reply_buffer, int reply_buf_size, int argc, char *argv[]);
} babbler_cmd_t;

/**
 * Информация по использованию команды: 
 * имя, краткое описание, подробное описание 
 * (синтаксис, описание параметров, руководство).
 */
typedef struct {
    /** Имя команды */
    const char* name;
        
    /** Краткое описание команды */
    const char* short_descr;
    
    /** Руководство по использованию команды: синтаксис, описание, параметры */
    const char* manual;
} babbler_man_t;


/** 
 * Зарегистрированные команды 
 * (значения требуется определить в основной программе) 
 */
extern const babbler_cmd_t BABBLER_COMMANDS[];

/** 
 * Количество зарегистрированных команд 
 * (значение требуется определить в основной программе) 
 */
extern const int BABBLER_COMMANDS_COUNT;

/** 
 * Руководства для зарегистрированных команд 
 * (значения требуется определить в основной программе) 
 */
extern const babbler_man_t BABBLER_MANUALS[];

/** 
 * Количество зарегистрированных руководств для команд 
 * (значение требуется определить в основной программе) 
 */
extern const int BABBLER_MANUALS_COUNT;

/**
 * Найти команду по имени, выполнить, записать ответ в reply_buffer,
 * вернуть размер ответа.
 *
 * Команда ищется по имени cmd среди зарегистрированных команд в глобальном
 * массиве BABBLER_COMMANDS, количество команд должно быть определено в глобальной 
 * переменной int BABBLER_COMMANDS_COUNT.
 * Если команда найдена, выполняется вызовом command.exec_cmd
 * Если команда не найдена, в reply_buffer записывается ответ REPLY_DONTUNDERSTAND
 * 
 * @param cmd - символьный буфер, содержит имя команды
 * @param argc - количество параметров команды
 * @param argv - массив с параметрами команды
 * @param reply_buffer - буфер для записи ответа, массив байт (строка или двоичный)
 * @param reply_buf_size - размер буфера reply_buffer - максимальная длина ответа.
 *     Реализация функции должна следить за тем, чтобы длина ответа не превышала
 *     максимальный размер буфера
 * @return длина ответа в байтах или код ошибки
 *     >0, <=reply_buf_size: количество байт, записанных в reply_buffer
 *     0: не отправлять ответ
 *    -1: ошибка при формировании ответа (не хватило места в буфере, ошибка выделения памяти и т.п.)
 */
int handle_command(char* cmd, int argc, char *argv[], char* reply_buffer, int reply_buf_size);

#endif // BABBLER_H

